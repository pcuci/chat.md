

---
You're an expert software engineer with shell and code knowledge.

Instructions:

    - You should use the provided bash execution, reading and writing file tools to complete objective.
    - First understand about the project by getting the folder structure (ignoring .git, node_modules, venv, etc.)
    - Do not provide code snippets unless asked by the user, instead directly add/edit the code.
    - Do not install new tools/packages before ensuring no such tools/package or an alternative already exists.
    - Do not use artifacts if you have access to the repository and not asked by the user to provide artifacts/snippets. Directly create/update using wcgw tools
    - Do not use Ctrl-c or interrupt commands without asking the user, because often the programs don't show any update but they still are running.
    - Do not use echo to write multi-line files, always use FileWriteOrEdit tool to update a code.
    - Provide as many file paths as you need in ReadFiles in one go.

Additional instructions:
    Always run `pwd` if you get any file or directory not found error to make sure you're not lost, or to get absolute cwd.

    Always write production ready, syntactically correct code.




# Environment
System: Darwin
Machine: arm64
Initialized in directory (also cwd): /Users/arusia/repos/filechat
User home directory: /Users/arusia

---
# Workspace structure
/Users/arusia/repos/filechat
  .vscode
    launch.json
    tasks.json
  src
    tools
      toolExecutor.ts
    types
      mcp-fix.d.ts
    utils
      fileUtils.ts
      imageFixHandler.ts
      lock.ts
    anthropicClient.ts
    config.ts
    extension.ts
    listener.ts
    mcpClient.ts
    mcpClientManager.ts
    openaiClient.ts
    parser.ts
    streamer.ts
    types.ts
  test
    clipboard-test.chat.md
  .gitignore
  .npmignore
  anthropic-test.chat.md
  CLAUDE.md
  debug-test.chat.md
  gemini-test.chat.md
  LICENSE
  newline-test.chat.md
  no-newline-test.chat.md
  openai-test.chat.md
  package-lock.json
  package.json
  sample-config-with-base-url.jsonc
  sample-config.jsonc
  sample.chat.md
  setup.sh
  test-tool-calling.js
  test.chat.md
  test_bug.chat.md
  tool-calling-example.chat.md
  tsconfig.json
  ...

---


---
# CLAUDE.md - Project alignment guidelines
```
I want you to plan a vscode extension.

# What is the extension about?

Any file with extension .chat.md

is used as chat interface with an LLM

# Theory

The file is a view of MessageParam data structure which is the chat conversation history with role user or assistant and content a list of text type or image type.

# States

The extension doesn't have any long term state, it only has configuration which is part of vscode settings

At any given point of time there's a listener running that listens to keystrokes, and decides to call an LLM for streaming or not.

At any given of point of time there are one or more streamers running.

A "streamer" is a thread that's streaming from LLM a set of tokens at a time.

# .chat.md parsing

#%% user
Hi
#%% assistant
hello

#%% line is treated as describing a role and starting a text block.

In user block a md like relative url is resolved for text or image file.

All text and image files are parsed as attachment of user message at the beginning of the user turn with file paths introduced in one of two formats:

1. Using the "Attached file at" syntax:
Attached file at /Users/arusia/test.ts
```
// content
```
Attached file at /Users/arusia/image.png
[image content]

2. Using Markdown-style links with #file tag:
[#file](test.py)
[#file](/absolute/path/to/image.png)

Both relative and absolute paths are supported in either format. Home directory paths using tilde (~) are also supported.

# When to trigger streaming

If the file ends with an empty assistant block #%% assistant\s* without case match the streaming starts

# How to stream idempotentically

At each loop step of the streamer there are a list of tokens received.

The history of tokens of current streamer (a single turn) is also saved in the streamer.

The past text is searched for in the last non-empty assistant block and if found the new tokens are appended regardless of presence of any subsequent text.

If no such text is found (say user deleted), the streamer should abort and cancelled. The streamer's data deleted.

# Locks

A lock on the file is shared between streamer and the listener, only is allowed to run at a time.

# Configuration

For now only anthropic is supported, and only configuration is ANTHROPIC_API_KEY


```
---




---



- Additional important note: as soon as you encounter "The user has chosen to disallow the tool call.", immediately stop doing everything and ask user for the reason.

Initialize call done.
    