
/Users/arusia/repos/filechat/src/parser.ts
```
1 // src/parser.ts
2 import { MessageParam, Content, Role } from './types';
3 import { log } from './extension';
4 // Import ASYNC file utils
5 import { isImageFile, resolveFilePath, readFileAsText, fileExists } from './utils/fileUtils';
6 import * as vscode from 'vscode';
7 
8 
9 const assistantLinkRegex = /^\s*!\[.*?\]\((cmdassets\/.*?\.txt)\)\s*$/; // Regex for assistant file links
10 
11 /**
12  * Parses a .chat.md file into structured messages
13  * Returns a readonly array to prevent mutations
14  *
15  * Note: Will exclude the last empty assistant block (used for triggering streaming)
16  */
17 // Make the function async as it now performs file I/O
18 export async function parseDocument(text: string, document: vscode.TextDocument): Promise<readonly MessageParam[]> {
19   const messages: MessageParam[] = [];
20 
21   // Regex to split document on #%% markers
22   const regex = /^#%% (user|assistant|tool_execute)\s*$/im;
23   const blocks = text.split(regex);
24   
25   // Debug logging
26   log(`Split document into ${blocks.length} blocks`);
27   for (let i = 0; i < Math.min(blocks.length, 10); i++) {
28     log(`Block ${i}: "${blocks[i].substring(0, 20).replace(/\n/g, '\\n')}${blocks[i].length > 20 ? '...' : ''}"`);
29   }
30   
31   // Skip first empty element if exists
32   let startIdx = blocks[0].trim() === '' ? 1 : 0;
33 
34   // Check if the last block is an empty assistant block
35   const hasEmptyLastAssistant =
36     blocks.length >= startIdx + 2 &&
37     blocks[blocks.length - 2].toLowerCase().trim() === 'assistant' &&
38     blocks[blocks.length - 1].trim() === '';
39   
40   // Determine endpoint for parsing (exclude empty last assistant block)
41   const endIdx = hasEmptyLastAssistant ? blocks.length - 2 : blocks.length;
42 
43 
44   // --- Pre-processing Step: Inline linked assistant files ---
45   for (let i = startIdx; i < endIdx; i += 2) {
46     if (i + 1 >= endIdx) break;
47     const role = blocks[i].toLowerCase().trim();
48     let content = blocks[i + 1]; // Get raw content block
49 
50     if (role === 'assistant') {
51         // Check if the entire content block matches the link pattern
52         const match = content.match(assistantLinkRegex);
53         if (match) {
54             const relativeFilePath = match[1];
55             log(`Detected assistant link: ${relativeFilePath}`);
56             try {
57                 // Ensure document is provided for resolving path
58                 if (!document) {
59                    throw new Error("Document context is required to resolve linked file paths.");
60                 }
61                 const absoluteFilePath = resolveFilePath(relativeFilePath, document);
62                 if (await fileExists(absoluteFilePath)) {
63                     const fileContent = await readFileAsText(absoluteFilePath);
64                     // Replace the link content *in the blocks array*
65                     // Add newlines for potential separation issues, trim later if needed
66                     blocks[i + 1] = '\n' + fileContent + '\n';
67                     log(`Successfully inlined content from ${relativeFilePath}`);
68                 } else {
69                     log(`Warning: Linked assistant file not found: ${relativeFilePath}`);
70                     blocks[i + 1] = `\n[Error: Could not load content from ${relativeFilePath}]\n`;
71                 }
72             } catch (error) {
73                 log(`Error processing linked assistant file ${relativeFilePath}: ${error}`);
74                 blocks[i + 1] = `\n[Error: Failed to read ${relativeFilePath}]\n`;
75             }
76         }
77     }
78   }
79   // --- End Pre-processing ---
80 
81 
82   // --- Main Message Parsing Loop ---
83   for (let i = startIdx; i < endIdx; i += 2) {
84     // If we have a role but no content block, skip
85     if (i + 1 >= endIdx) {
86         break;
87     }
88 
89     const role = blocks[i].toLowerCase().trim() as Role; // Added type assertion
90     // Now trim the content *after* potential inlining
91     const content = blocks[i + 1].trim();
92 
93     // Skip empty assistant blocks (even after potential link replacement if file was empty/error)
94     if (role === 'assistant' && content === '') {
95       continue;
96     }
97     
98     // Detect if this is a tool_execute block
99     if (role === 'tool_execute') {
100       // Tool execute blocks are treated as user messages
101       if (content) {
102         messages.push({
103           role: 'user',
104           content: [{ type: 'text', value: content }]
105         });
106       }
107       // Skip this block in normal processing
108       continue;
109     }
110     
111     if (role === 'user' as Role) {
112       // Only add user message if it has actual content
113       const parsedContent = parseUserContent(content, document);
114       if (parsedContent.length > 0) {
115         messages.push({
116           role,
117           content: parsedContent
118         });
119       }
120     } else if (role === 'assistant') {
121       messages.push({
122         role,
123         content: [{ type: 'text', value: content }]
124       });
125     }
126   }
127   
128   return Object.freeze(messages);
129 }
130 
131 /**
132  * Parses user content to extract text and file references
133  */
134 function parseUserContent(text: string, document?: vscode.TextDocument): Content[] {
135   const content: Content[] = [];
136   
137   // Original format: "Attached file at /path/to/file"
138   const fileAttachmentRegex = /^Attached file at ([^\n]+)\n(?:```[^\n]*\n([\s\S]*?)```|\[image content\])/gm;
139   
140   // New format: Markdown-style links like [anything](test.py)
141   const markdownLinkRegex = /\[([^\]]*)\]\(([^)]+)\)/g;
142   
143   // Collection of file attachments to add at the top
144   const topAttachments: string[] = [];
145   
146   // Process markdown-style links and collect attachments for top
147   if (document) {
148     let mdMatch;
149     
150     // First pass - collect all matches and create attachments
151     while ((mdMatch = markdownLinkRegex.exec(text)) !== null) {
152       const altText = mdMatch[1];
153       const filePath = mdMatch[2];
154       
155       // Skip links that are explicitly marked to not be treated as files
156       // by checking if the alt text contains "nofile" or "no-file"
157       if (altText.toLowerCase().includes('nofile') || 
158           altText.toLowerCase().includes('no-file')) {
159         continue;
160       }
161       
162       const resolvedPath = resolveFilePath(filePath, document);
163       const isImage = isImageFile(filePath);
164       
165       // For text files, read the content
166       let fileContent;
167       if (!isImage && fileExists(resolvedPath)) {
168         fileContent = readFileAsText(resolvedPath);
169       }
170       
171       // Create attachment format but don't replace the link
172       const attachment = isImage 
173         ? `Attached file at ${filePath}\n[image content]\n\n`
174         : `Attached file at ${filePath}\n\`\`\`\n${fileContent || 'Unable to read file content'}\n\`\`\`\n\n`;
175       
176       topAttachments.push(attachment);
177       
178       log(`Added attachment for: ${filePath} (${isImage ? 'image' : 'text'})`);
179     }
180   }
181   
182   // Add all attachments at the top of the text
183   if (topAttachments.length > 0) {
184     text = topAttachments.join('') + text;
185     log(`Added ${topAttachments.length} attachments at the top of the message`);
186   }
187   
188   let lastIndex = 0;
189   let match;
190   
191   // Process the original "Attached file at" format (which now includes the ones we added at the top)
192   while ((match = fileAttachmentRegex.exec(text)) !== null) {
193     // Add text before the attachment
194     const beforeText = text.substring(lastIndex, match.index).trim();
195     if (beforeText) {
196       content.push({ type: 'text', value: beforeText });
197     }
198     
199     const path = match[1];
200     if (path.endsWith('.png') || path.endsWith('.jpg') || path.endsWith('.jpeg') || 
201         path.endsWith('.gif') || path.endsWith('.webp')) {
202       content.push({ type: 'image', path });
203     } else {
204       // For non-image files, extract content from code block
205       content.push({ type: 'text', value: match[2] || '' });
206     }
207     
208     lastIndex = match.index + match[0].length;
209   }
210   
211   
212   // Add remaining text
213   const remainingText = text.substring(lastIndex).trim();
214   if (remainingText) {
215     content.push({ type: 'text', value: remainingText });
216   }
217   
218   // If no content was extracted, use the full text
219   if (content.length === 0 && text.trim()) {
220       // Log warning or handle as needed if it became empty after inlining
221       log(`Skipping empty assistant block at index ${i}`);
222       continue;
223     }
224 
225     // Process user or tool_execute roles (tool_execute becomes user message)
226     if (role === 'user' || role === 'tool_execute') {
227        // Ensure document context for user content parsing if needed for file attachments
228        if (!document) {
229           log("Warning: Document context not available for parsing user content files.");
230           // Handle appropriately, maybe skip file parsing in parseUserContent
231        }
232        const parsedContent = parseUserContent(content, document); // Pass document here
233        if (parsedContent.length > 0 || role === 'tool_execute') { // Ensure tool_execute results always included
234           messages.push({
235              // Treat tool_execute as user role for the LLM history
236              role: 'user',
237              content: parsedContent.length > 0 ? parsedContent : [{ type: 'text', value: content }] // Use raw if parse is empty
238           });
239        }
240     } else if (role === 'assistant') {
241         // Assistant content is already processed (inlined or original text)
242         messages.push({
243             role,
244             content: [{ type: 'text', value: content }] // Always text after inlining
245         });
246     } else {
247          log(`Warning: Skipping unrecognized role block: "${role}"`);
248     }
249   } // End main loop
250 
251 
252   return Object.freeze(messages);
253 }
254 
255 
256 /**
257  * Parses user content to extract text and file references
258  * (Ensure document is passed if resolving relative paths)
259  */
260 function parseUserContent(text: string, document?: vscode.TextDocument): Content[] { // Added optional document
261   const content: Content[] = [];
262 
263   // Original format: "Attached file at /path/to/file"
264   // Adjusted regex to be less strict about start of line for attachments we prepend
265   const fileAttachmentRegex = /(?:^|\n)Attached file at ([^\n]+)\n(?:```([\s\S]*?)```|\[image content\])/gm;
266 
267 
268   // New format: Markdown-style links like [anything](test.py)
269   const markdownLinkRegex = /\[([^\]]*)\]\(([^)]+)\)/g;
270 
271   // Collection of file attachments to add at the top
272   const topAttachments: string[] = [];
273 
274   // Text remaining after extracting markdown links for processing
275   let remainingTextForAttachments = text;
276 
277 
278   // Process markdown-style links and collect attachments for top
279   if (document) { // Only process if document context is available
280     let mdMatch;
281     const processedLinkIndices = new Set<number>(); // Track processed links to avoid duplication
282 
283     // Create a temporary string to replace links so they aren't re-processed by fileAttachmentRegex
284     let tempText = text;
285 
286     // First pass - collect all matches and create attachments
287     while ((mdMatch = markdownLinkRegex.exec(text)) !== null) {
288         if (processedLinkIndices.has(mdMatch.index)) continue;
289 
290         const fullMatchText = mdMatch[0];
291         const altText = mdMatch[1];
292         const filePath = mdMatch[2];
293 
294         // Skip links that are explicitly marked to not be treated as files
295         if (altText.toLowerCase().includes('nofile') ||
296             altText.toLowerCase().includes('no-file')) {
297             processedLinkIndices.add(mdMatch.index);
298             continue; // Skip this link
299         }
300 
301         // Basic check for non-file URIs (http, mailto, etc.) - skip these
302         if (/^[a-zA-Z]+:/.test(filePath) && !filePath.startsWith('file:')) {
303              processedLinkIndices.add(mdMatch.index);
304              continue;
305         }
306 
307         try {
308             const resolvedPath = resolveFilePath(filePath, document);
309             // Use async fileExists here if needed, but parser wasn't fully async yet
310             // For now, stick to sync fileExists for simplicity in this part.
311             // If parser becomes fully async, switch this.
312             if (!fileExists(resolvedPath)) { // Use sync version here for now
313                  log(`Markdown link file not found: ${resolvedPath} (from ${filePath})`);
314                  processedLinkIndices.add(mdMatch.index);
315                  continue; // Skip if file doesn't exist
316             }
317 
318             const isImage = isImageFile(filePath);
319             let fileContent: string | undefined;
320             if (!isImage) {
321                  // Use sync readFileAsText here too, consistent with fileExists check
322                  fileContent = readFileAsText(resolvedPath);
323             }
324 
325             // Create attachment format
326             // Ensure newline before "Attached file" if it's not the start
327             const prefix = topAttachments.length > 0 || tempText.substring(0, mdMatch.index).trim() !== '' ? '\n' : '';
328             const attachment = isImage
329                 ? `${prefix}Attached file at ${filePath}\n[image content]\n`
330                 : `${prefix}Attached file at ${filePath}\n\`\`\`\n${fileContent || 'Unable to read file content'}\n\`\`\`\n`;
331 
332             topAttachments.push(attachment);
333             log(`Prepared attachment for markdown link: ${filePath}`);
334 
335             // Mark this link range as processed in the temporary text to avoid re-matching
336             // Replace with placeholder that won't match attachment regex
337             tempText = tempText.substring(0, mdMatch.index) + `[Processed Link:${mdMatch.index}]` + tempText.substring(mdMatch.index + fullMatchText.length);
338             processedLinkIndices.add(mdMatch.index);
339 
340         } catch (error) {
341              log(`Error processing markdown link ${filePath}: ${error}`);
342              processedLinkIndices.add(mdMatch.index); // Mark as processed even on error
343         }
344     }
345      // Use the text with links replaced for subsequent processing
346      remainingTextForAttachments = tempText.replace(/\[Processed Link:\d+\]/g, ''); // Remove placeholders
347   }
348 
349   // Prepend collected attachments
350   const fullTextToParse = topAttachments.join('') + remainingTextForAttachments;
351 
352 
353   // Process the combined text (prepended attachments + original text minus links)
354   // using the "Attached file at" regex
355   let lastIndex = 0;
356   let match;
357   while ((match = fileAttachmentRegex.exec(fullTextToParse)) !== null) {
358     // Add text before the attachment
359     const beforeText = fullTextToParse.substring(lastIndex, match.index).trim();
360     if (beforeText) {
361         content.push({ type: 'text', value: beforeText });
362     }
363 
364     const filePath = match[1]; // File path is group 1 now
365     const fileContent = match[2]; // File content (if text) is group 2
366 
367     if (fileContent !== undefined) {
368         // It's a text file attachment
369         // We prepend the "Attached file..." line for context, then the content
370          const combinedText = `Attached file at ${filePath}\n\`\`\`\n${fileContent}\n\`\`\``;
371          content.push({ type: 'text', value: combinedText });
372          log(`Parsed text attachment: ${filePath}`);
373     } else {
374         // It's an image attachment ([image content] was matched instead of code block)
375         content.push({ type: 'image', path: filePath }); // Store only path for image
376         log(`Parsed image attachment: ${filePath}`);
377     }
378 
379     lastIndex = fileAttachmentRegex.lastIndex; // Use lastIndex from regex exec
380   }
381 
382 
383   // Add remaining text after the last attachment
384   const remainingText = fullTextToParse.substring(lastIndex).trim();
385   if (remainingText) {
386     content.push({ type: 'text', value: remainingText });
387   }
388 
389 
390   // Final check: If no content parts were generated but the original text wasn't empty, add it as plain text.
391   // This handles cases with no attachments or links.
392   if (content.length === 0 && text.trim().length > 0) {
393      content.push({ type: 'text', value: text.trim() });
394   }
395 
396   return content;
397 }
398 
399 
400 /**
401  * Checks if a document ends with an empty assistant block
402  * Used to determine when to start streaming
403  */
404 export function hasEmptyAssistantBlock(text: string): boolean {
405   // Log the exact document text for debugging (truncated)
406   const displayText = text.length > 100 ? text.substring(text.length - 100) : text;
407   log(`Checking for empty assistant block in: "${displayText.replace(/\n/g, '\\n')}"`);
408   
409   // Check if the document ends with a pattern that should trigger streaming
410   // Specifically, we want "#%% assistant" followed by a newline and optional whitespace at the end
411   const lastAssistantIndex = text.lastIndexOf('#%% assistant');
412   
413   // If no assistant block found or it's not near the end, return false
414   if (lastAssistantIndex === -1 || lastAssistantIndex < text.length - 30) {
415     log('No assistant block found near the end of the document');
416     return false;
417   }
418   
419   // Check if there's a newline after "#%% assistant"
420   const textAfterMarker = text.substring(lastAssistantIndex + 13); // Length of '#%% assistant'
421   
422   // First, check for at least one newline
423   if (!textAfterMarker.includes('\n')) {
424     log('No newline after "#%% assistant", not triggering streaming');
425     return false;
426   }
427   
428   // Now check if there's only whitespace after the newline
429   const hasContentAfterNewline = /\n\s*[^\s]/.test(textAfterMarker);
430   
431   if (hasContentAfterNewline) {
432     log('Found content after newline, not an empty assistant block');
433     return false;
434   }
435   
436   // If we got here, we have "#%% assistant" followed by a newline and only whitespace after that
437   log('Found empty assistant block with newline, triggering streaming');
438   return true;
439 }
440 
441 /**
442  * Checks if a document has an empty tool_execute block
443  * Used to determine when to execute a tool
444  */
445 export function hasEmptyToolExecuteBlock(text: string): boolean {
446   // Log document suffix for debugging
447   const displayText = text.length > 100 ? text.substring(text.length - 100) : text;
448   log(`Checking for empty tool_execute block in: "${displayText.replace(/\n/g, '\\n')}"`);
449 
450   // More precise approach: find all tool_execute blocks and check if any are empty
451   // Look for blocks that are either at the end of the document or followed by another block
452   const blockMatches = [];
453   const regex = /#%% tool_execute\s*([\s\S]*?)(?=\n#%%|$)/gm;
454   let match;
455   
456   while ((match = regex.exec(text)) !== null) {
457     const blockContent = match[1].trim();
458     const position = match.index;
459     blockMatches.push({ position, content: blockContent });
460     
461     log(`Found tool_execute block at ${position}: content=${blockContent ? 'non-empty' : 'empty'}`);
462   }
463   
464   // Check if we found any empty blocks
465       const emptyBlocks = blockMatches.filter(block => block.content === '');
466 
467       if (emptyBlocks.length > 0) {
468         log(`Found ${emptyBlocks.length} empty tool_execute block(s), will trigger tool execution`);
469         return true;
470       }
471 
472       return false;
473     }
474 
475 
476 /**
477  * Gets all assistant block positions in a document
478  * Used to find where to place streamed content
479  */
480 export function findAssistantBlocks(text: string): {start: number, end: number}[] {
481   const blocks: {start: number, end: number}[] = [];
482   const regex = /^#%% assistant\s*$/im;
483   
484   let match;
485   const lines = text.split('\n');
486   
487   for (let i = 0; i < lines.length; i++) {
488     if (regex.test(lines[i])) {
489       // Found an assistant block
490       const start = lines.slice(0, i).join('\n').length + (i > 0 ? 1 : 0); // Add newline except for first line
491       const end = start + lines[i].length;
492       blocks.push({start, end});
493     }
494   }
495   
496   return blocks;
497 }
498 
499 /**
500  * Finds all assistant blocks with their content start positions
501  * Used for more precise token insertion
502  */
503 export function findAllAssistantBlocks(text: string): {markerStart: number, contentStart: number}[] {
504   const blocks: {markerStart: number, contentStart: number}[] = [];
505   const lines = text.split('\n');
506   let lineOffset = 0;
507   
508   for (let i = 0; i < lines.length; i++) {
509     if (/^#%% assistant\s*$/i.test(lines[i])) {
510       // Found an assistant block
511       const markerStart = lineOffset;
512       
513       // Calculate the content start (after the marker line)
514       let contentStart = lineOffset + lines[i].length;
515       
516       // Skip any whitespace after the marker
517       while (contentStart < text.length && 
518              (text[contentStart] === ' ' || text[contentStart] === '\t')) {
519         contentStart++;
520       }
521       
522       // Skip newline if present
523       if (contentStart < text.length && text[contentStart] === '\n') {
524         contentStart++;
525       }
526       
527       blocks.push({markerStart, contentStart});
528     }
529     
530     lineOffset += lines[i].length + 1; // +1 for the newline
531   }
532   
533   return blocks;
534 }
```