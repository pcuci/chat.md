
/Users/arusia/repos/filechat/src/parser.ts
```
// src/parser.ts
import { MessageParam, Content, Role } from './types';
import { log } from './extension';
// Import ASYNC file utils
import { isImageFile, resolveFilePath, readFileAsText, fileExists } from './utils/fileUtils';
import * as vscode from 'vscode';


const assistantLinkRegex = /^\s*!\[.*?\]\((cmdassets\/.*?\.txt)\)\s*$/; // Regex for assistant file links

/**
 * Parses a .chat.md file into structured messages
 * Returns a readonly array to prevent mutations
 *
 * Note: Will exclude the last empty assistant block (used for triggering streaming)
 */
// Make the function async as it now performs file I/O
export async function parseDocument(text: string, document: vscode.TextDocument): Promise<readonly MessageParam[]> {
  const messages: MessageParam[] = [];

  // Regex to split document on #%% markers
  const regex = /^#%% (user|assistant|tool_execute)\s*$/im;
  const blocks = text.split(regex);
  
  // Debug logging
  log(`Split document into ${blocks.length} blocks`);
  for (let i = 0; i < Math.min(blocks.length, 10); i++) {
    log(`Block ${i}: "${blocks[i].substring(0, 20).replace(/\n/g, '\\n')}${blocks[i].length > 20 ? '...' : ''}"`);
  }
  
  // Skip first empty element if exists
  let startIdx = blocks[0].trim() === '' ? 1 : 0;

  // Check if the last block is an empty assistant block
  const hasEmptyLastAssistant =
    blocks.length >= startIdx + 2 &&
    blocks[blocks.length - 2].toLowerCase().trim() === 'assistant' &&
    blocks[blocks.length - 1].trim() === '';
  
  // Determine endpoint for parsing (exclude empty last assistant block)
  const endIdx = hasEmptyLastAssistant ? blocks.length - 2 : blocks.length;


  // --- Pre-processing Step: Inline linked assistant files ---
  for (let i = startIdx; i < endIdx; i += 2) {
    if (i + 1 >= endIdx) break;
    const role = blocks[i].toLowerCase().trim();
    let content = blocks[i + 1]; // Get raw content block

    if (role === 'assistant') {
        // Check if the entire content block matches the link pattern
        const match = content.match(assistantLinkRegex);
        if (match) {
            const relativeFilePath = match[1];
            log(`Detected assistant link: ${relativeFilePath}`);
            try {
                // Ensure document is provided for resolving path
                if (!document) {
                   throw new Error("Document context is required to resolve linked file paths.");
                }
                const absoluteFilePath = resolveFilePath(relativeFilePath, document);
                if (await fileExists(absoluteFilePath)) {
                    const fileContent = await readFileAsText(absoluteFilePath);
                    // Replace the link content *in the blocks array*
                    // Add newlines for potential separation issues, trim later if needed
                    blocks[i + 1] = '\n' + fileContent + '\n';
                    log(`Successfully inlined content from ${relativeFilePath}`);
                } else {
                    log(`Warning: Linked assistant file not found: ${relativeFilePath}`);
                    blocks[i + 1] = `\n[Error: Could not load content from ${relativeFilePath}]\n`;
                }
            } catch (error) {
                log(`Error processing linked assistant file ${relativeFilePath}: ${error}`);
                blocks[i + 1] = `\n[Error: Failed to read ${relativeFilePath}]\n`;
            }
        }
    }
  }
  // --- End Pre-processing ---


  // --- Main Message Parsing Loop ---
  for (let i = startIdx; i < endIdx; i += 2) {
    // If we have a role but no content block, skip
    if (i + 1 >= endIdx) {
        break;
    }

    const role = blocks[i].toLowerCase().trim() as Role; // Added type assertion
    // Now trim the content *after* potential inlining
    const content = blocks[i + 1].trim();

    // Skip empty assistant blocks (even after potential link replacement if file was empty/error)
    if (role === 'assistant' && content === '') {
      continue;
    }
    
    // Detect if this is a tool_execute block
    if (role === 'tool_execute') {
      // Tool execute blocks are treated as user messages
      if (content) {
        messages.push({
          role: 'user',
          content: [{ type: 'text', value: content }]
        });
      }
      // Skip this block in normal processing
      continue;
    }
    
    if (role === 'user' as Role) {
      // Only add user message if it has actual content
      const parsedContent = parseUserContent(content, document);
      if (parsedContent.length > 0) {
        messages.push({
          role,
          content: parsedContent
        });
      }
    } else if (role === 'assistant') {
      messages.push({
        role,
        content: [{ type: 'text', value: content }]
      });
    }
  }
  
  return Object.freeze(messages);
}

/**
 * Parses user content to extract text and file references
 */
function parseUserContent(text: string, document?: vscode.TextDocument): Content[] {
  const content: Content[] = [];
  
  // Original format: "Attached file at /path/to/file"
  const fileAttachmentRegex = /^Attached file at ([^\n]+)\n(?:```[^\n]*\n([\s\S]*?)```|\[image content\])/gm;
  
  // New format: Markdown-style links like [anything](test.py)
  const markdownLinkRegex = /\[([^\]]*)\]\(([^)]+)\)/g;
  
  // Collection of file attachments to add at the top
  const topAttachments: string[] = [];
  
  // Process markdown-style links and collect attachments for top
  if (document) {
    let mdMatch;
    
    // First pass - collect all matches and create attachments
    while ((mdMatch = markdownLinkRegex.exec(text)) !== null) {
      const altText = mdMatch[1];
      const filePath = mdMatch[2];
      
      // Skip links that are explicitly marked to not be treated as files
      // by checking if the alt text contains "nofile" or "no-file"
      if (altText.toLowerCase().includes('nofile') || 
          altText.toLowerCase().includes('no-file')) {
        continue;
      }
      
      const resolvedPath = resolveFilePath(filePath, document);
      const isImage = isImageFile(filePath);
      
      // For text files, read the content
      let fileContent;
      if (!isImage && fileExists(resolvedPath)) {
        fileContent = readFileAsText(resolvedPath);
      }
      
      // Create attachment format but don't replace the link
      const attachment = isImage 
        ? `Attached file at ${filePath}\n[image content]\n\n`
        : `Attached file at ${filePath}\n\`\`\`\n${fileContent || 'Unable to read file content'}\n\`\`\`\n\n`;
      
      topAttachments.push(attachment);
      
      log(`Added attachment for: ${filePath} (${isImage ? 'image' : 'text'})`);
    }
  }
  
  // Add all attachments at the top of the text
  if (topAttachments.length > 0) {
    text = topAttachments.join('') + text;
    log(`Added ${topAttachments.length} attachments at the top of the message`);
  }
  
  let lastIndex = 0;
  let match;
  
  // Process the original "Attached file at" format (which now includes the ones we added at the top)
  while ((match = fileAttachmentRegex.exec(text)) !== null) {
    // Add text before the attachment
    const beforeText = text.substring(lastIndex, match.index).trim();
    if (beforeText) {
      content.push({ type: 'text', value: beforeText });
    }
    
    const path = match[1];
    if (path.endsWith('.png') || path.endsWith('.jpg') || path.endsWith('.jpeg') || 
        path.endsWith('.gif') || path.endsWith('.webp')) {
      content.push({ type: 'image', path });
    } else {
      // For non-image files, extract content from code block
      content.push({ type: 'text', value: match[2] || '' });
    }
    
    lastIndex = match.index + match[0].length;
  }
  
  
  // Add remaining text
  const remainingText = text.substring(lastIndex).trim();
  if (remainingText) {
    content.push({ type: 'text', value: remainingText });
  }
  
  // If no content was extracted, use the full text
  if (content.length === 0 && text.trim()) {
      // Log warning or handle as needed if it became empty after inlining
      log(`Skipping empty assistant block at index ${i}`);
      continue;
    }

    // Process user or tool_execute roles (tool_execute becomes user message)
    if (role === 'user' || role === 'tool_execute') {
       // Ensure document context for user content parsing if needed for file attachments
       if (!document) {
          log("Warning: Document context not available for parsing user content files.");
          // Handle appropriately, maybe skip file parsing in parseUserContent
       }
       const parsedContent = parseUserContent(content, document); // Pass document here
       if (parsedContent.length > 0 || role === 'tool_execute') { // Ensure tool_execute results always included
          messages.push({
             // Treat tool_execute as user role for the LLM history
             role: 'user',
             content: parsedContent.length > 0 ? parsedContent : [{ type: 'text', value: content }] // Use raw if parse is empty
          });
       }
    } else if (role === 'assistant') {
        // Assistant content is already processed (inlined or original text)
        messages.push({
            role,
            content: [{ type: 'text', value: content }] // Always text after inlining
        });
    } else {
         log(`Warning: Skipping unrecognized role block: "${role}"`);
    }
  } // End main loop


  return Object.freeze(messages);
}


/**
 * Parses user content to extract text and file references
 * (Ensure document is passed if resolving relative paths)
 */
function parseUserContent(text: string, document?: vscode.TextDocument): Content[] { // Added optional document
  const content: Content[] = [];

  // Original format: "Attached file at /path/to/file"
  // Adjusted regex to be less strict about start of line for attachments we prepend
  const fileAttachmentRegex = /(?:^|\n)Attached file at ([^\n]+)\n(?:```([\s\S]*?)```|\[image content\])/gm;


  // New format: Markdown-style links like [anything](test.py)
  const markdownLinkRegex = /\[([^\]]*)\]\(([^)]+)\)/g;

  // Collection of file attachments to add at the top
  const topAttachments: string[] = [];

  // Text remaining after extracting markdown links for processing
  let remainingTextForAttachments = text;


  // Process markdown-style links and collect attachments for top
  if (document) { // Only process if document context is available
    let mdMatch;
    const processedLinkIndices = new Set<number>(); // Track processed links to avoid duplication

    // Create a temporary string to replace links so they aren't re-processed by fileAttachmentRegex
    let tempText = text;

    // First pass - collect all matches and create attachments
    while ((mdMatch = markdownLinkRegex.exec(text)) !== null) {
        if (processedLinkIndices.has(mdMatch.index)) continue;

        const fullMatchText = mdMatch[0];
        const altText = mdMatch[1];
        const filePath = mdMatch[2];

        // Skip links that are explicitly marked to not be treated as files
        if (altText.toLowerCase().includes('nofile') ||
            altText.toLowerCase().includes('no-file')) {
            processedLinkIndices.add(mdMatch.index);
            continue; // Skip this link
        }

        // Basic check for non-file URIs (http, mailto, etc.) - skip these
        if (/^[a-zA-Z]+:/.test(filePath) && !filePath.startsWith('file:')) {
             processedLinkIndices.add(mdMatch.index);
             continue;
        }

        try {
            const resolvedPath = resolveFilePath(filePath, document);
            // Use async fileExists here if needed, but parser wasn't fully async yet
            // For now, stick to sync fileExists for simplicity in this part.
            // If parser becomes fully async, switch this.
            if (!fileExists(resolvedPath)) { // Use sync version here for now
                 log(`Markdown link file not found: ${resolvedPath} (from ${filePath})`);
                 processedLinkIndices.add(mdMatch.index);
                 continue; // Skip if file doesn't exist
            }

            const isImage = isImageFile(filePath);
            let fileContent: string | undefined;
            if (!isImage) {
                 // Use sync readFileAsText here too, consistent with fileExists check
                 fileContent = readFileAsText(resolvedPath);
            }

            // Create attachment format
            // Ensure newline before "Attached file" if it's not the start
            const prefix = topAttachments.length > 0 || tempText.substring(0, mdMatch.index).trim() !== '' ? '\n' : '';
            const attachment = isImage
                ? `${prefix}Attached file at ${filePath}\n[image content]\n`
                : `${prefix}Attached file at ${filePath}\n\`\`\`\n${fileContent || 'Unable to read file content'}\n\`\`\`\n`;

            topAttachments.push(attachment);
            log(`Prepared attachment for markdown link: ${filePath}`);

            // Mark this link range as processed in the temporary text to avoid re-matching
            // Replace with placeholder that won't match attachment regex
            tempText = tempText.substring(0, mdMatch.index) + `[Processed Link:${mdMatch.index}]` + tempText.substring(mdMatch.index + fullMatchText.length);
            processedLinkIndices.add(mdMatch.index);

        } catch (error) {
             log(`Error processing markdown link ${filePath}: ${error}`);
             processedLinkIndices.add(mdMatch.index); // Mark as processed even on error
        }
    }
     // Use the text with links replaced for subsequent processing
     remainingTextForAttachments = tempText.replace(/\[Processed Link:\d+\]/g, ''); // Remove placeholders
  }

  // Prepend collected attachments
  const fullTextToParse = topAttachments.join('') + remainingTextForAttachments;


  // Process the combined text (prepended attachments + original text minus links)
  // using the "Attached file at" regex
  let lastIndex = 0;
  let match;
  while ((match = fileAttachmentRegex.exec(fullTextToParse)) !== null) {
    // Add text before the attachment
    const beforeText = fullTextToParse.substring(lastIndex, match.index).trim();
    if (beforeText) {
        content.push({ type: 'text', value: beforeText });
    }

    const filePath = match[1]; // File path is group 1 now
    const fileContent = match[2]; // File content (if text) is group 2

    if (fileContent !== undefined) {
        // It's a text file attachment
        // We prepend the "Attached file..." line for context, then the content
         const combinedText = `Attached file at ${filePath}\n\`\`\`\n${fileContent}\n\`\`\``;
         content.push({ type: 'text', value: combinedText });
         log(`Parsed text attachment: ${filePath}`);
    } else {
        // It's an image attachment ([image content] was matched instead of code block)
        content.push({ type: 'image', path: filePath }); // Store only path for image
        log(`Parsed image attachment: ${filePath}`);
    }

    lastIndex = fileAttachmentRegex.lastIndex; // Use lastIndex from regex exec
  }


  // Add remaining text after the last attachment
  const remainingText = fullTextToParse.substring(lastIndex).trim();
  if (remainingText) {
    content.push({ type: 'text', value: remainingText });
  }


  // Final check: If no content parts were generated but the original text wasn't empty, add it as plain text.
  // This handles cases with no attachments or links.
  if (content.length === 0 && text.trim().length > 0) {
     content.push({ type: 'text', value: text.trim() });
  // Brace removed from the line above this comment
  // Removed extra brace here

  return content;
}


/**
 * Checks if a document ends with an empty assistant block
 * Used to determine when to start streaming
 */
export function hasEmptyAssistantBlock(text: string): boolean {
  // Log the exact document text for debugging (truncated)
  const displayText = text.length > 100 ? text.substring(text.length - 100) : text;
  log(`Checking for empty assistant block in: "${displayText.replace(/\n/g, '\\n')}"`);
  
  // Check if the document ends with a pattern that should trigger streaming
  // Specifically, we want "#%% assistant" followed by a newline and optional whitespace at the end
  const lastAssistantIndex = text.lastIndexOf('#%% assistant');
  
  // If no assistant block found or it's not near the end, return false
  if (lastAssistantIndex === -1 || lastAssistantIndex < text.length - 30) {
    log('No assistant block found near the end of the document');
    return false;
  }
  
  // Check if there's a newline after "#%% assistant"
  const textAfterMarker = text.substring(lastAssistantIndex + 13); // Length of '#%% assistant'
  
  // First, check for at least one newline
  if (!textAfterMarker.includes('\n')) {
    log('No newline after "#%% assistant", not triggering streaming');
    return false;
  }
  
  // Now check if there's only whitespace after the newline
  const hasContentAfterNewline = /\n\s*[^\s]/.test(textAfterMarker);
  
  if (hasContentAfterNewline) {
    log('Found content after newline, not an empty assistant block');
    return false;
  }
  
  // If we got here, we have "#%% assistant" followed by a newline and only whitespace after that
  log('Found empty assistant block with newline, triggering streaming');
  return true;
}

/**
 * Checks if a document has an empty tool_execute block
 * Used to determine when to execute a tool
 */
export function hasEmptyToolExecuteBlock(text: string): boolean {
  // Log document suffix for debugging
  const displayText = text.length > 100 ? text.substring(text.length - 100) : text;
  log(`Checking for empty tool_execute block in: "${displayText.replace(/\n/g, '\\n')}"`);

  // More precise approach: find all tool_execute blocks and check if any are empty
  // Look for blocks that are either at the end of the document or followed by another block
  const blockMatches = [];
  const regex = /#%% tool_execute\s*([\s\S]*?)(?=\n#%%|$)/gm;
  let match;
  
  while ((match = regex.exec(text)) !== null) {
    const blockContent = match[1].trim();
    const position = match.index;
    blockMatches.push({ position, content: blockContent });
    
    log(`Found tool_execute block at ${position}: content=${blockContent ? 'non-empty' : 'empty'}`);
  }
  
  // Check if we found any empty blocks
      const emptyBlocks = blockMatches.filter(block => block.content === '');

      if (emptyBlocks.length > 0) {
        log(`Found ${emptyBlocks.length} empty tool_execute block(s), will trigger tool execution`);
        return true;
      }

      return false;
    }


/**
 * Gets all assistant block positions in a document
 * Used to find where to place streamed content
 */
export function findAssistantBlocks(text: string): {start: number, end: number}[] {
  const blocks: {start: number, end: number}[] = [];
  const regex = /^#%% assistant\s*$/im;
  
  let match;
  const lines = text.split('\n');
  
  for (let i = 0; i < lines.length; i++) {
    if (regex.test(lines[i])) {
      // Found an assistant block
      const start = lines.slice(0, i).join('\n').length + (i > 0 ? 1 : 0); // Add newline except for first line
      const end = start + lines[i].length;
      blocks.push({start, end});
    }
  }
  
  return blocks;
}

/**
 * Finds all assistant blocks with their content start positions
 * Used for more precise token insertion
 */
export function findAllAssistantBlocks(text: string): {markerStart: number, contentStart: number}[] {
  const blocks: {markerStart: number, contentStart: number}[] = [];
  const lines = text.split('\n');
  let lineOffset = 0;
  
  for (let i = 0; i < lines.length; i++) {
    if (/^#%% assistant\s*$/i.test(lines[i])) {
      // Found an assistant block
      const markerStart = lineOffset;
      
      // Calculate the content start (after the marker line)
      let contentStart = lineOffset + lines[i].length;
      
      // Skip any whitespace after the marker
      while (contentStart < text.length && 
             (text[contentStart] === ' ' || text[contentStart] === '\t')) {
        contentStart++;
      }
      
      // Skip newline if present
      if (contentStart < text.length && text[contentStart] === '\n') {
        contentStart++;
      }
      
      blocks.push({markerStart, contentStart});
    }
    
    lineOffset += lines[i].length + 1; // +1 for the newline
  }
  
  return blocks;
}
```